import { DefaultScopeProvider, type Module, inject } from 'langium';
import {
  DefaultDefinitionProvider,
  type DefaultSharedModuleContext,
  type LangiumServices,
  type LangiumSharedServices,
  type PartialLangiumServices,
  createDefaultModule,
  createDefaultSharedModule,
} from 'langium/lsp';

import { GraphCodeActionProvider } from '../lsp/graph-code-actions.js';
import { GraphFormatter } from '../lsp/graph-formatter.js';
//import { GraphDefinitionProvider } from '../lsp/graph-definition-provider.js';
import { GraphNameProvider } from '../lsp/graph-name-provider.js';
import { GraphRenameProvider } from '../lsp/graph-rename-provider.js';
import { GraphScopeComputation } from '../lsp/graph-scope-computation.js';
import { GraphGeneratedModule, GraphGeneratedSharedModule } from './generated/module.js';
import { GraphValidator, registerValidationChecks } from './graph-validator.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export interface GraphAddedServices {
  validation: {
    GraphValidator: GraphValidator;
  };

  references: {
    ScopeComputation: GraphScopeComputation;
  };
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type GraphServices = LangiumServices & GraphAddedServices;

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const GraphModule: Module<GraphServices, PartialLangiumServices & GraphAddedServices> = {
  validation: {
    /**
     * Registers the custom GraphValidator for language-specific validations.
     */
    GraphValidator: () => new GraphValidator(),
  },
  references: {
    /**
     * Registers the custom GraphNameProvider for name resolution.
     */
    NameProvider: () => new GraphNameProvider(),
    /**
     * Registers the custom GraphScopeComputation for scope computation.
     */
    // ScopeComputation: (services) => new DefaultScopeComputation(services),
    ScopeComputation: (services) => new GraphScopeComputation(services),
    /**
     * Registers the custom GraphScopeProvider for scope access.
     */
    ScopeProvider: (services) => new DefaultScopeProvider(services),
  },
  lsp: {
    /**
     * Registers the custom GraphCodeActionProvider for providing code actions.
     */
    CodeActionProvider: () => new GraphCodeActionProvider(),
    /**
     * Registers the custom GraphDefinitionProvider for "Go to Definition" functionality.
     */
    // DefinitionProvider: (services) => new GraphDefinitionProvider(services),
    DefinitionProvider: (services) => new DefaultDefinitionProvider(services),
    /**
     * Registers the custom GraphRenameProvider for rename refactoring.
     */
    RenameProvider: (services) => new GraphRenameProvider(services),
    /**
     * Registers the custom GraphFormatter for formatting.
     */
    Formatter: () => new GraphFormatter(),
  },
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createGraphServices(context: DefaultSharedModuleContext): {
  shared: LangiumSharedServices;
  Graph: GraphServices;
} {
  const shared = inject(createDefaultSharedModule(context), GraphGeneratedSharedModule);
  const Graph = inject(createDefaultModule({ shared }), GraphGeneratedModule, GraphModule);
  shared.ServiceRegistry.register(Graph);
  registerValidationChecks(Graph);
  if (!context.connection) {
    // We don't run inside a language server
    // Therefore, initialize the configuration provider instantly
    shared.workspace.ConfigurationProvider.initialized({}).catch((exception) =>
      console.error(exception),
    );
  }
  return { shared, Graph };
}
